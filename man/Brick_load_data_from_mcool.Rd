% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Brick_functions.R
\name{Brick_load_data_from_mcool}
\alias{Brick_load_data_from_mcool}
\title{Load a NxN dimensional matrix into the Brick store from an mcool file.}
\usage{
Brick_load_data_from_mcool(Brick = NULL, mcool = NULL, chr1 = NULL,
    chr2 = NULL, binsize = NULL, cooler.batch.size = 1e+06,
    matrix.chunk = 2000, dont.look.for.chr2 = FALSE,
    remove.prior = FALSE, norm.factor = "Iterative-Correction")
}
\arguments{
\item{Brick}{\strong{Required}.
A string specifying the path to the Brick store created with CreateBrick.}

\item{mcool}{\strong{Required}.
Path to an mcool file.}

\item{chr1}{\strong{Required}.
A character vector of length 1 specifying the chromosome corresponding to
the rows of the matrix}

\item{chr2}{\strong{Required}.
A character vector of length 1 specifying the chromosome corresponding to
the columns of the matrix}

\item{binsize}{\strong{Optional}.
The binsize to select from an mcool file.}

\item{cooler.batch.size}{\strong{Optional}. Default 1000000.
The number of values to read per iteration through a mcool file.}

\item{matrix.chunk}{\strong{Optional}. Default 2000.
The nxn matrix square to fill per iteration in a mcool file.}

\item{dont.look.for.chr2}{\strong{Required}.
At startup, the function will attempt to search for the first occurence
of a chr2 contact value. This is done to avoid the reading of all chr1
values for every chunk processed. If chr1 and chr2 are equivalent, consider
setting it to FALSE.}

\item{remove.prior}{\strong{Optional}. Default FALSE
If a matrix was loaded before, it will not be replaced. Use remove.prior to
override and replace the existing matrix.}

\item{norm.factor}{\strong{Optional}. Default "Iterative-Correction".
The normalization factor to use for normalization from an mcool file.}
}
\value{
Returns TRUE if all went well.
}
\description{
Read an mcool contact matrix coming out of 4D nucleome projects into a
Brick store.
}
\examples{

\dontrun{

require(curl)
curl_download(url = paste("https://data.4dnucleome.org/"
"files-processed/4DNFI7JNCNFB/"
"@download/4DNFI7JNCNFB.mcool",sep = ""),
destfile = "./H1-hESC-HiC-4DNFI7JNCNFB.mcool")

Output.brick <- paste("./H1-hESC-HiC-4DNFI7JNCNFB-10000",
"ICE-normalised-chr1.brick",sep = "-")
mcool <- "./H1-hESC-HiC-4DNFI7JNCNFB.mcool"

CreateBrick_from_mcool(Brick = Output.brick,
mcool = mcool,
binsize = 10000,
chrs = "chr1")

Brick_load_data_from_mcool(Brick = Output.brick, mcool = mcool,
chr1 = "chr1", chr2 = "chr1", binsize = 10000,
cooler.batch.size = 1000000, matrix.chunk = 2000,
dont.look.for.chr2 = TRUE, remove.prior = TRUE,
norm.factor = "Iterative-Correction")

}


}
\seealso{
\code{\link{CreateBrick_from_mcool}} to create matrix from an mcool
file, \code{\link{Brick_list_mcool_resolutions}} to list available
resolutions in an mcool file, \code{\link{Brick_list_mcool_normalisations}}
to list available normalisation factors in the mcool file.
}
